@model EndUserDetailsModel
@{
    ViewData["Title"] = "welcomepost";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@using (Html.BeginForm("FileUpload", "MyWelcome", FormMethod.Get))
{
    @*@Html.AntiForgeryToken();*@
<div  >    
    <div class="center">
        <ul style="list-style:none">

            <li>@Html.TextBoxFor(m => m.firstname, htmlAttributes: new { @class = "form_field", placeholder = "Full Name" })</li>


            <li> @Html.TextBoxFor(m => m.email, htmlAttributes: new { @class = "form_field", placeholder = "Referrer Email" })</li>
            <li> @Html.TextBoxFor(m => m.Referalcode, htmlAttributes: new { @class = "form_field", placeholder = "Approver Email Code" })</li>
        </ul>
      
    </div>
    <div>
        <div id="popup1" class="overlay">
            <div class="popup">
                <h2>Here i am</h2>
                <a class="close" href="#">&times;</a>
                <div class="content">
                    Thank to pop me out of that button, but now i'm done so you can close this window.
                </div>
            </div>
        </div>
    </div>
    @*<div class="validation-section">
        @Html.ValidationMessageFor(m => m.email)
    </div>*@
    <div style="text-align:center;margin-top:10px">
        <input type="submit" class="btn btn-primary" value="Next" id-="SubmitEmail" />
    </div>
    <div class="">
        @*@Html.Partial("checkhistory",Model)*@
       
        
        <div>
            <meta charset="utf-8" />

            <script src="~/js/modernizr.js" type="text/javascript"></script>

            <script src="~/js/classie.js" type="text/javascript"></script>

            <style>
                button {
                    padding: 1em 2em;
                    outline: none;
                    font-weight: 600;
                    border: none;
                    color: #fff;
                    background: green;
                    -webkit-border-radius: 49px 48px 48px 48px;
                    -moz-border-radius: 49px 48px 48px 48px;
                    border-radius: 49px 48px 48px 48px;
                }

                .dialog,
                .dialog__overlay {
                    width: 100%;
                    height: 100%;
                    top: 0;
                    left: 0;
                }

                .dialog {
                    position: fixed;
                    display: -webkit-flex;
                    display: flex;
                    -webkit-align-items: center;
                    align-items: center;
                    -webkit-justify-content: center;
                    justify-content: center;
                    pointer-events: none;
                }

                .dialog__overlay {
                    position: absolute;
                    z-index: 1;
                    background: rgba(55, 58, 71, 0.9);
                    opacity: 0;
                    -webkit-transition: opacity 0.3s;
                    transition: opacity 0.3s;
                    -webkit-backface-visibility: hidden;
                }

                .dialog--open .dialog__overlay {
                    opacity: 1;
                    pointer-events: auto;
                }

                .dialog__content {
                    width: 50%;
                    max-width: 560px;
                    min-width: 290px;
                    background: #fff;
                    padding: 4em;
                    text-align: center;
                    position: relative;
                    z-index: 5;
                    opacity: 0;
                }

                .dialog--open .dialog__content {
                    pointer-events: auto;
                }

                /* Content */
                .dialog h2 {
                    margin: 0;
                    font-weight: 400;
                    font-size: 2em;
                    padding: 0 0 2em;
                    margin: 0;
                }


                .dialog--open .dialog__overlay {
                    -webkit-transition-duration: 0.8s;
                    transition-duration: 0.8s;
                }

                .dialog--close .dialog__overlay {
                    -webkit-transition-duration: 0.5s;
                    transition-duration: 0.5s;
                }

                .dialog__content {
                    padding: 0;
                    background: transparent;
                }

                .dialog.dialog--open .dialog__content {
                    opacity: 1;
                }

                .morph-shape {
                    position: absolute;
                    width: calc(100% + 4px);
                    height: calc(100% + 4px);
                    top: -2px;
                    left: -2px;
                    z-index: -1;
                }

                    .morph-shape svg rect {
                        stroke: #fff;
                        stroke-width: 2px;
                        stroke-dasharray: 1680;
                    }

                .dialog--open .morph-shape svg rect {
                    -webkit-animation: anim-dash 0.6s forwards;
                    animation: anim-dash 0.6s forwards;
                }

                .dialog-inner {
                    opacity: 0;
                    background: #fff;
                }

                .dialog--open .dialog-inner {
                    padding: 4em;
                    opacity: 1;
                    -webkit-transition: opacity 0.85s 0.35s;
                    transition: opacity 0.85s 0.35s;
                }

                .dialog.dialog--open h2 {
                    -webkit-animation: anim-elem-1 0.7s ease-out both;
                    animation: anim-elem-1 0.7s ease-out both;
                }

                .dialog.dialog--open button {
                    -webkit-animation: anim-elem-2 0.7s ease-out both;
                    animation: anim-elem-2 0.7s ease-out both;
                }

                keyframes anim-dash {
                    0%

                {
                    stroke-dashoffset: 1680;
                }

                100% {
                    stroke-dashoffset: 0;
                }

                }

                -webkit-keyframes anim-dash {
                    0%

                {
                    stroke-dashoffset: 1680;
                }

                100% {
                    stroke-dashoffset: 0;
                }

                }

                /* Inner elements animations */

                -webkit-keyframes anim-elem-1 {
                    0%

                {
                    opacity: 0;
                    -webkit-transform: translate3d(-150px, 0, 0);
                }

                100% {
                    opacity: 1;
                    -webkit-transform: translate3d(0, 0, 0);
                }

                }

                keyframes anim-elem-1 {
                    0%

                {
                    opacity: 0;
                    -webkit-transform: translate3d(-150px, 0, 0);
                    transform: translate3d(-150px, 0, 0);
                }

                100% {
                    opacity: 1;
                    -webkit-transform: translate3d(0, 0, 0);
                    transform: translate3d(0, 0, 0);
                }

                }

                -webkit-keyframes anim-elem-2 {
                    0%

                {
                    opacity: 0;
                    -webkit-transform: translate3d(150px, 0, 0);
                }

                100% {
                    opacity: 1;
                    -webkit-transform: translate3d(0, 0, 0);
                }

                }

                keyframes anim-elem-2 {
                    0%

                {
                    opacity: 0;
                    -webkit-transform: translate3d(150px, 0, 0);
                    transform: translate3d(150px, 0, 0);
                }

                100% {
                    opacity: 1;
                    -webkit-transform: translate3d(0, 0, 0);
                    transform: translate3d(0, 0, 0);
                }
                }
            </style>



        </div>
        <div id="divbdy">
            <div class="button-wrap"><button onclick="return false;" data-dialog="somedialog" class="trigger">Check History</button></div>


            <div id="somedialog" class="dialog dialog--close">
                <div class="dialog__overlay"></div>
                <div class="dialog__content">
                    <div class="morph-shape">
                        <svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%" viewBox="0 0 560 280" preserveAspectRatio="none">
                            <rect x="3" y="3" fill="none" width="556" height="276"></rect>
                        </svg>
                    </div>
                    <div class="dialog-inner">
                        <h2><strong>Hi @Model.firstname, </strong> We are reviewing your previous submission. We will notify you once approved.</h2>
                        <div><button class="action" onclick="return false;" data-dialog-close="a">Close</button></div>
                    </div>
                </div>
            </div>
            <script type="text/javascript">

                ; (function (window) {

                    'use strict';

                    var support = { animations: Modernizr.cssanimations },
                        animEndEventNames = { 'WebkitAnimation': 'webkitAnimationEnd', 'OAnimation': 'oAnimationEnd', 'msAnimation': 'MSAnimationEnd', 'animation': 'animationend' },
                        animEndEventName = animEndEventNames[Modernizr.prefixed('animation')],
                        onEndAnimation = function (el, callback) {
                            var onEndCallbackFn = function (ev) {
                                if (support.animations) {
                                    if (ev.target != this) return;
                                    this.removeEventListener(animEndEventName, onEndCallbackFn);
                                }
                                if (callback && typeof callback === 'function') { callback.call(); }
                            };
                            if (support.animations) {
                                el.addEventListener(animEndEventName, onEndCallbackFn);
                            }
                            else {
                                onEndCallbackFn();
                            }
                        };

                    function extend(a, b) {
                        for (var key in b) {
                            if (b.hasOwnProperty(key)) {
                                a[key] = b[key];
                            }
                        }
                        return a;
                    }

                    function DialogFx(el, options) {
                        this.el = el;
                        this.options = extend({}, this.options);
                        extend(this.options, options);
                        this.ctrlClose = this.el.querySelector('[data-dialog-close]');
                        this.isOpen = false;
                        this._initEvents();
                    }

                    DialogFx.prototype.options = {
                        // callbacks
                        onOpenDialog: function () { return false; },
                        onCloseDialog: function () { return false; }
                    }

                    DialogFx.prototype._initEvents = function () {
                        var self = this;

                        // close action
                        this.ctrlClose.addEventListener('click', this.toggle.bind(this));

                        // esc key closes dialog
                        document.addEventListener('keydown', function (ev) {
                            var keyCode = ev.keyCode || ev.which;
                            if (keyCode === 27 && self.isOpen) {
                                self.toggle();
                            }
                        });

                        this.el.querySelector('.dialog__overlay').addEventListener('click', this.toggle.bind(this));
                    }

                    DialogFx.prototype.toggle = function () {
                        var self = this;
                        if (this.isOpen) {
                            classie.remove(this.el, 'dialog--open');
                            classie.add(self.el, 'dialog--close');

                            onEndAnimation(this.el.querySelector('.dialog__content'), function () {
                                classie.remove(self.el, 'dialog--close');
                            });

                            // callback on close
                            this.options.onCloseDialog(this);
                        }
                        else {
                            classie.add(this.el, 'dialog--open');

                            // callback on open
                            this.options.onOpenDialog(this);
                        }
                        this.isOpen = !this.isOpen;
                    };

                    // add to global namespace
                    window.DialogFx = DialogFx;

                })(window);

                /* call */


                window.onload = function loaded() {
                    var dlgtrigger = document.querySelector('[data-dialog]');
                    somedialog = document.getElementById(dlgtrigger.getAttribute('data-dialog'));
                    dlg = new DialogFx(somedialog);

                    dlgtrigger.addEventListener('click', dlg.toggle.bind(dlg));

                };


            </script>
        </div >
    


    </div>
</div>
}

<script type="text/javascript">
    //$(document).ready(function () {
    //    if ($("#email").valid()) {
    //        $("#SubmitEmail").prop('disabled', false);

    //    }
    //});
</script>
<style>
    .center {
        margin-left: auto;
        margin-top: 40px;
        margin-right: auto;
        width: 30%;
        height: 500px;
        border: 1px solid #808080;
        padding: 10px;
        background-color: rgb(255, 153, 0);
        -webkit-box-shadow: -3px -8px 52px 4px rgba(63,64,63,0.53);
        -moz-box-shadow: -3px -8px 52px 4px rgba(63,64,63,0.53);
        box-shadow: -3px -8px 52px 4px rgba(63,64,63,0.53);
        -webkit-border-radius: 49px 48px 48px 48px;
        -moz-border-radius: 49px 48px 48px 48px;
        border-radius: 49px 48px 48px 48px;
    }

    /*pop up start*/

    .overlay {
        position: fixed;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        background: rgba(0, 0, 0, 0.7);
        transition: opacity 500ms;
        visibility: hidden;
        opacity: 0;
    }

        .overlay:target {
            visibility: visible;
            opacity: 1;
        }

    .popup {
        margin: 70px auto;
        padding: 20px;
        background: #fff;
        border-radius: 5px;
        width: 30%;
        position: relative;
        transition: all 5s ease-in-out;
    }

        .popup h2 {
            margin-top: 0;
            color: #333;
            font-family: Tahoma, Arial, sans-serif;
        }

        .popup .close {
            position: absolute;
            top: 20px;
            right: 30px;
            transition: all 200ms;
            font-size: 30px;
            font-weight: bold;
            text-decoration: none;
            color: #333;
        }

            .popup .close:hover {
                color: #06D85F;
            }

        .popup .content {
            max-height: 30%;
            overflow: auto;
        }
   /*pop end */
</style>